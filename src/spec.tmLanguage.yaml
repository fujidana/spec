# # Install js-yaml as a development only dependency in your extension
# $ npm install js-yaml --save-dev

# # Use the command-line tool to convert the yaml grammar to json
# $ npx js-yaml syntaxes/spec.tmLanguage.yaml > syntaxes/spec.tmLanguage.json

# (?<=^|;)\s*(def)...

$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: spec
scopeName: source.spec
patterns:
- include: '#top-level-statement'
repository:
  top-level-statement:
    patterns:
    - ### usage: def identifier string-constant;
      begin: (?<=^|;)\s*(def)\s+(\w+)(?:\s*(\()(.*)(\)))?\s*(')
      beginCaptures:
        '1': {name: storage.type.macro.spec}
        '2': {name: entity.name.function.spec, patterns: [{include: '#identifier-validation'}]}
        '3': {name: punctuation.function-argument.begin.spec}
        '4': {patterns: [{include: '#identifier-list-variable'}]}
        '5': {name: punctuation.function-argument.end.spec}
        '6': {name: punctuation.function-body.begin.spec}
      end: "'"
      endCaptures:
        '0': {name: punctuation.function-body.end.spec}
      contentName: meta.function-body.spec
      patterns: [{include: '#statement'}]
    - include: '#statement'
  statement:
    patterns:
    - match: \s+
    - match: ;
      name: punctuation.statement.separator.spec
    - include: '#comment'
    - include: '#code-block'
    - include: '#declaration'
    - include: '#control'
    - include: '#builtin-macro'
    - match: '[^\}]*($|})'
      captures:
        '0': {patterns: [{include: '#expression-line'}]}
    repository:
      code-block:
        patterns:
        - begin: \{
          beginCaptures:
            '0': {name: punctuation.block.begin.spec}
          end: \}
          endCaptures:
            '0': {name: punctuation.block.end.spec}
          name: meta.block.spec
          patterns: [{include: '#statement'}]
      control:
        patterns:
        - begin: \b(if)\s*(\()
          beginCaptures:
            '1': {name: keyword.control.branch.spec}
            '2': {name: punctuation.branch-condition.begin.spec}
          end: (\))
          endCaptures:
            '1': {name: punctuation.branch-condition.end.spec}
          contentName: meta.branch-condition.spec
          patterns: [{include: '#expression-core'}]
        - match: \belse\b
          name: keyword.control.branch.spec
        - begin: \b(for)\s*(\()
          beginCaptures:
            '1': {name: keyword.control.flow.spec}
            '2': {name: punctuation.flow-condition.begin.spec}
          end: (\))
          endCaptures:
            '1': {name: punctuation.flow-condition.end.spec}
          contentName: meta.flow-condition.spec
          patterns: [{include: '#for-condition'}]
        - begin: \b(while)\s*(\()
          beginCaptures:
            '1': {name: keyword.control.flow.spec}
            '2': {name: punctuation.flow-condition.begin.spec}
          end: (\))
          endCaptures:
            '1': {name: punctuation.flow-condition.end.spec}
          contentName: meta.flow-condition.spec
          patterns: [{include: '#expression-core'}]
        - match: \b(break|continue|exit)\s*(?=$|;|#|""")
          captures:
            '1': {name: keyword.control.transfer.spec}
        - match: \b(return)(?:\s*|\s++(.+))(?=$|;|#|""")
          captures:
            '1': {name: keyword.control.transfer.spec}
            '2': {patterns: [{include: '#expression-line'}]}
        repository:
          for-condition:
            patterns:
            - include: '#expression-core'
            - match: ;
              name: punctuation.flow-condition.separator.spec
            # - match: (?:(.+)\s+(in)\s+(.+))\s*(?=\))
            #   captures: 
            # - match: .*?\s*(?=\))
            #   name: invalid.illegal.for-condition.spec
      declaration:
        patterns:
        - ### usage: rdef identifier expression;
          begin: \b(rdef)\s+(\w+)\s+
          beginCaptures:
            '1': {name: storage.type.macro.spec}
            '2': {name: entity.name.function.spec, patterns: [{include: '#identifier-validation'}]}
          end: (?=$|;|#|""")
          patterns: [{include: '#expression-line'}]
        - ### usage: undef identifier-list
          match: \b(undef)\s+(\w.*?)(?=$|;|#|""")
          captures:
            '1': {name: storage.type.macro.spec}
            '2': {patterns: [{include: '#identifier-list-function'}]}
        - ### usage: (local|global|shared|extern shared)? data-array-declaration
          match: \b(?:(local|global|shared)\s+)?(?:(float|double|string|u?(?:byte|short|long(?:64)?))\s+)?(array)\s+(.*?)(?=$|;|#|""")
          captures:
            '1': {name: storage.modifier.array.spec}
            '2': {name: storage.type.data-array.spec}
            '3': {name: storage.type.data-array.spec}
            '4': {patterns: [{include: '#array-validation'}]}
        - ### usage: extern shared array spec:id:arr
          match: \b(extern)\s+(shared)\s+(array)\s+(?:(\w+?)(:)(?:(\d+?):)?)?(.+?)(?=$|;|#|""")
          captures:
            # '1': {name: entity.other.array.spec, patterns: [{include: '#identifier-validation'}]}
            '1': {name: storage.modifier.array.spec}
            '2': {name: storage.modifier.array.spec}
            '3': {name: storage.type.data-array.spec}
            '4': {name: entity.other.process-version.spec}
            '5': {name: punctuation.extern.separator.spec}
            '6': {name: entity.other.process-id.spec}
            '7': {name: punctuation.extern.separator.spec}
            '8': {name: entity.other.array.spec, patterns: [{include: '#identifier-validation'}]}
        - ### usage: constant identifier (=) expression
          match: \b(constant)\s+(\w+)(?:\s*(=)\s*|\s+)(.*?)(?=$|;|#|""")
          captures:
            '1': {name: storage.modifier.constant.spec}
            '2': {name: entity.other.constant.spec, patterns: [{include: '#identifier-validation'}]}
            '3': {name: keyword.operator.arithmetic.assignment.spec}
            '4': {patterns: [{include: '#expression-line'}]}
        - ### (local|global) identifier-list
          match: \b(local|global)\s++(.+?)(?=$|;|#|""")
          captures:
            '1': {name: storage.modifier.variable.spec}
            '2': {patterns: [{include: '#identifier-list-variable-array'}]}
        - ### unglobal identifier-list
          match: \b(unglobal)\s++(.+?)(?=$|;|#|""")
          captures:
            '1': {name: storage.modifier.variable.spec}
            '2': {patterns: [{include: '#identifier-list-variable'}]}
        - ### delete assoc-elem-list; delete accos-array
          match: \b(delete)\s++(.+?)(?=$|;|#|""")
          captures:
            '1': {name: storage.type.assoc-array.spec}
            '2': {patterns: [{include: '#array-list'}]}
      builtin-macro:
        patterns:
        - ### usage: (memstat|savstate|reconfig|getcounts|move_all|move_cnt|sync)
          match: \b(memstat|savstate|reconfig|getcounts|move_(?:all|cnt)|sync)\s*(?=$|;|#|""")
          captures:
            '1': {name: support.function.built-in.macro.spec}
        - ### usage: (lscmd|lsdef|prdef|syms) [pattern ...]
          match: \b(ls(?:cmd|def)|prdef|syms)(?:\s*|\s+(.+?))(?=$|;|#|""")
          captures:
            '1': {name: support.function.built-in.macro.spec}
            '2': {patterns: [{include: '#pattern-list'}]}
        - ### usage: (print|eprint) expression-list
          match: \b(print|eprint)\s++(.+)(?=$|;|#|""")
          captures:
            '1': {name: support.function.built-in.macro.spec}
            '2': {patterns: [{include: '#expression-line'}]}
        - ### usage: (history) N?
          match: \b(history)(?:\s*|\s++(.+))(?=$|;|#|""")
          captures:
            '1': {name: support.function.built-in.macro.spec}
            '2': {patterns: [{include: '#expression-line'}]}
  expression-line:
    patterns:
    - include: '#expression-core'
    - match: ;.*$
      captures:
        '0': {patterns: [{include: '#statement'}]}
  expression-core:
    patterns:
    - include: '#function-call'
    - include: '#lvalue'
    - include: '#literal-numeric'
    - include: '#literal-string'
    - include: '#comment'
    - include: '#nested-expression'
    - include: '#invalid-word'
    - include: '#operator'
    - include: '#array-access'
    repository:
      lvalue:
        patterns:
        - match: \b(in)\b
          name: keyword.control.flow.spec
        - match: \b(PI)\b
          name: support.constant.spec
        - match: \b(OUTFILES|CCDS|COUNTERS|CWD|DISPLAY|EVAL_(ERR|RESULT)|FRESH|GETLINE_EOF|HOME|HOSTNAME|IS_SERVER|MCAS|MOTORS|SPECD?|USER|VERSION)\b
          name: support.variable.readonly.spec
        - match: \b(A|S|DEBUG|HDW_ERR|DISPLAY|TERM|GTERM|ROWS|COLS)\b
          name: support.variable.readwrite.spec
        - match: \$(#|\*|[0-9]+)
          name: variable.other.spec
        - match: \b([a-zA-Z_][a-zA-Z0-9_]*)\b
          name: entity.other.variable.spec
          patterns: [{include: '#identifier-validation'}]
      literal-numeric:
        patterns:
        - name: constant.numeric.integer.hexadecimal.spec
          match: \b(?<!\.)(0[xX])[0-9a-fA-F]+(?![\.\w])
          captures:
            '1': {name: keyword.other.integer.hexadecimal.spec}
        - name: constant.numeric.integer.octal.spec
          match: \b(?<!\.)(0)[0-7]+(?![\.\w])
          captures:
            '1': {name: keyword.other.integer.otcal.spec}
        - name: constant.numeric.integer.decimal.spec
          match: \b(?<!\.)(0|[1-9][0-9]*)(?![\.\w])
        - name: constant.numeric.float.spec
          match: \b(?<!\.)[0-9]+(\.[0-9]*)?((e|E)[+-]?[0-9]+)?(?![\.\w])
          captures:
            '3': {name: keyword.other.float.scientific-notation.spec}
        - name: constant.numeric.float.spec
          match: (?<!\w)\.[0-9]+((e|E)[+-]?[0-9]+)?(?![\.\w])
          captures:
            '2': {name: keyword.other.float.scientific-notation.spec}
        - name: invalid.illegal.numeric.other.spec
          match: \b[0-9][\w.]*
      literal-string:
        patterns:
        - name: string.quoted.double.spec
          begin: \"
          beginCaptures:
            '0': {name: punctuation.string.begin.spec}
          end: \"
          endCaptures :
            '0': {name: punctuation.string.end.spec}
          patterns:
          - name: constant.character.escape.spec
            match: \\([abfnrt'"\\]|[0-7]{1,3})
          - name: invalid.illegal.unknown-escape.spec
            match: \\.
          # - name: invalid.warning.unconcatenated-line.spec
          #   match: '[^\\](\r\n|\r|\n)'
      function-call: ### No spacing is allowed before the opening parenthesis.
        patterns:
        - name: meta.function-call.spec
          begin: \b(?:(chdir|get(?:env|help|val|sval|line)|time|unix|date|file_info|whatis|calc|eval2?|spec_(?:par|menu)|sleep|open|close|on|off|dofile|qdofile|input|yesno|printf|eprintf|fprintf|tty_(?:cntl|move|fmt)|cdef|clone|strdef|exp(?:10)?|log(?:10)?|pow|srand|rand|sqrt|int|fabs|cos|sin|tan|a(?:cos|sin|tan|tan2)|index|split|sub(str)?|length|sprintf|sscanf|rsplit|gsub|gensub|match|asc|bcd|dcb|deg|rad|array_(?:dump|read|pipe|plot|copy|op|fit)|plot_(?:cntl|move|range)|splot_cntl|fmt_(?:read|write|close)|h5_(?:attr|file|link|data)|prop_(?:send|watch|get|put)|remote_(?:cmd|eval|async|poll|stat|par)|encode|decode|data_(?:grp|info|nput|get|dump|read|pipe|plot|put|fit|uop|bop|anal)|motor_(?:mne|name|num|par)|read_motors|dial|chg_dial|get_lim|move_info|user|chg_offset|set_lim|mcount|tcount|cnt_(?:mne|name|num)|counter_par|set_sim|wait|stop|mca_(?:par|get|put|sel|spar|sget|sput)|image_(?:par|get|put)|taco_(?:io|db|dc)|tango_(?:io|get|put|db)|epics_(?:par|get|put)|em_io|sock_(?:par|get|put)|ser_(?:par|get|put)|gpib_(?:par|get|put|poll|cntl)|vme_(?:move|get(?:32)?|put(?:32)?)|port_(?:getw?|putw?)|vxi11_(?:par|get|put)|fbus_(?:get|put)|ca_(?:cntl|get|put|fna))|([a-zA-Z_][a-zA-Z0-9_]*))(\()
          beginCaptures:
            '1': {name: support.function.built-in.function.spec}
            '2': {name: entity.name.function.spec, patterns: [{include: '#identifier-validation'}]}
            '3': {name: punctuation.definition.arguments.begin.spec}
          end: \)
          endCaptures:
            '0': {name: punctuation.definition.arguments.end.spec}
          patterns:
          - include: '#expression-core'
          # - include: '#expression-list'
      nested-expression:
        patterns:
        - begin: \(
          beginCaptures:
            '0': {name: punctuation.nested-expression.left.spec}
          end: \)
          endCapture:
            '0': {name: punctuation.nested-expression.right.spec}
          name: meta.nested-expression.spec
          patterns: [{include: 'expression-core'}]
      operator:
        patterns:
        - name: keyword.operator.arithmetic.increment-decrement.spec
          match: --|\+\+
        - name: keyword.operator.bitwise.assignment.spec
          match: <<=|>>=|\^=|&=|\|=
        - name: keyword.operator.bitwise.shift.spec
          match: <<|>>
        - name: keyword.operator.arithmetic.comparison.spec
          match: ==|!=|<=|>=|<|>
        - name: keyword.operator.arithmetic.assignment.spec
          match: \+=|−=|\*=|/=|%=|=
        - name: keyword.operator.logical.and-or.spec
          match: \|\||&&
        - name: keyword.operator.arithmetic.spec
          match: \*|/|-|\+|%
        - name: keyword.operator.bitwise.logical.spec
          match: \||&|\^
        - name: keyword.operator.logical.not.spec
          match: '!'
        - name: keyword.operator.bitwise.not.spec
          match: \~
        - match: (@)([a-zA-Z_][a-zA-Z0-9_]*)\b
          captures:
            '1': {name: keyword.operator.indirection.spec}
            '2': {name: variable.other.spec, patterns: [{include: '#identifier-validation'}]}
      array-access:
        patterns:
        - begin: \[
          beginCaptures:
            '0': {name: punctuation.array.left.spec}
          end: \]
          endCaptures:
            '0': {name: punctuation.array.right.spec}
          name: meta.array.spec
          patterns:
          - include: '#expression-core'
      invalid-word:
        patterns:
          - match: \{
            name: invalid.illegal.not-used-in-expression.spec
  comment:
    patterns:
    - match: (#).*$
      name: comment.line.number-sign.spec
      captures:
        '1': {name: punctuation.comment.line.spec}
    - begin: '"""'
      beginCaptures: 
        '1': {name: punctuation.comment.docstring.begin.spec}
      end: '"""'
      endCaptures: 
        '1': {name: punctuation.comment.docstring.end.spec}
      name: comment.block.documentation.spec #string.quoted.triple.spec
  identifier-list-variable:
    patterns:
    - match: (?:\s*([^,]+?)\s*)(,|$)
      captures:
        '1': {name: entity.other.variable.spec, patterns: [{include: '#identifier-validation'}]}
        '2': {name: punctuation.list-separator.spec}
  identifier-list-variable-array:
    patterns:
    - match: (?:\s*(?:(\w+)\s*(?:(\[)\s*(\])){1,2}|([^,]+?))\s*)(,|$)
      captures:
        '1': {name: entity.other.array.spec, patterns: [{include: '#identifier-validation'}]}
        '2': {name: punctuation.array.left.spec}
        '3': {name: punctuation.array.right.spec}
        '4': {name: entity.other.variable.spec, patterns: [{include: '#identifier-validation'}]}
        '5': {name: punctuation.list.separator.spec}
  identifier-list-function:
    patterns:
    - match: (?:\s*([^,]+?)\s*)(,|$)
      captures:
        '1': {name: entity.name.function.spec, patterns: [{include: '#identifier-validation'}]}
        '2': {name: punctuation.list.separator.spec}
  array-list:
    patterns:
    - match: (?:\s*([^,]+?)\s*)(,|$)
      captures:
        '1': {name: entity.name.array.spec, patterns: [{include: '#array-validation'}]}
        '2': {name: punctuation.list.separator.spec}
  pattern-list:
    patterns:
      - match: (\S+)(\s|$)
        captures:
          '1': {name: entity.name.pattern.spec, patterns: [{include: '#pattern-validation'}]}
          # '2': {name: punctuation.list.separator.spec}
  identifier-validation:
    patterns:
      - match: "\\b(\
        def|rdef|undef|constant|local|global|unglobal|\
        shared|extern|float|double|string|u?(?:byte|short|long(?:64)?)|array|delete|\
        if|else|while|for|in|break|continue|exit|return|quit|\
        memstat|savstate|reconfig|getcounts|move_(?:all|cnt)|sync|ls(?:cmd|def)|prdef|syms|print|eprint|history|\
        chdir|get(?:env|help|val|sval|line)|time|unix|date|file_info|whatis|calc|eval2?|spec_(?:par|menu)|sleep|open|close|on|off|dofile|qdofile|input|yesno|printf|eprintf|fprintf|tty_(?:cntl|move|fmt)|cdef|clone|strdef|exp(?:10)?|log(?:10)?|pow|srand|rand|sqrt|int|fabs|cos|sin|tan|a(?:cos|sin|tan|tan2)|index|split|sub(str)?|length|sprintf|sscanf|rsplit|gsub|gensub|match|asc|bcd|dcb|deg|rad|array_(?:dump|read|pipe|plot|copy|op|fit)|plot_(?:cntl|move|range)|splot_cntl|fmt_(?:read|write|close)|h5_(?:attr|file|link|data)|prop_(?:send|watch|get|put)|remote_(?:cmd|eval|async|poll|stat|par)|encode|decode|data_(?:grp|info|nput|get|dump|read|pipe|plot|put|fit|uop|bop|anal)|motor_(?:mne|name|num|par)|read_motors|dial|chg_dial|get_lim|move_info|user|chg_offset|set_lim|mcount|tcount|cnt_(?:mne|name|num)|counter_par|set_sim|wait|stop|mca_(?:par|get|put|sel|spar|sget|sput)|image_(?:par|get|put)|taco_(?:io|db|dc)|tango_(?:io|get|put|db)|epics_(?:par|get|put)|em_io|sock_(?:par|get|put)|ser_(?:par|get|put)|gpib_(?:par|get|put|poll|cntl)|vme_(?:move|get(?:32)?|put(?:32)?)|port_(?:getw?|putw?)|vxi11_(?:par|get|put)|fbus_(?:get|put)|ca_(?:cntl|get|put|fna)|\
        PI|\
        OUTFILES|CCDS|COUNTERS|CWD|DISPLAY|EVAL_(ERR|RESULT)|FRESH|GETLINE_EOF|HOME|HOSTNAME|IS_SERVER|MCAS|MOTORS|SPECD?|USER|VERSION|\
        A|S|DEBUG|HDW_ERR|DISPLAY|TERM|GTERM|ROWS|COLS\
        )\\b"
        name: invalid.illegal.reserved-identifier.spec
      - match: '[a-zA-Z_][a-zA-Z0-9_]*'
      - match: .*
        name: invalid.illegal.invalid-identifier.spec
  array-validation:
    patterns:
      - match: (\w+)\s*(?:(\[)(.*?)(\])){1,2}
        captures:
          '1': {name: entity.other.array.spec, patterns: [{include: '#identifier-validation'}]}
          '2': {name: punctuation.array.left.spec}
          '3': {patterns: [{include: '#expression'}]}
          '4': {name: punctuation.array.right.spec}
      - name: invalid.illegal.invalid-array.spec
        match: .*
  pattern-validation:
    patterns:
      - match: '[a-zA-Z0-9_?*]+\Z'
      - match: .*
        name: invalid.illegel.invalid-pattern.spec
