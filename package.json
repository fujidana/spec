{
	"publisher": "fujidana",
	"name": "spec-command",
	"displayName": "spec command",
	"description": "Language support for CSS spec command files",
	"version": "1.5.0",
	"engines": {
		"vscode": "^1.57.0"
	},
	"categories": [
		"Programming Languages",
		"Snippets",
		"Linters"
	],
	"icon": "resources/icon.png",
	"keywords": [
		"X-ray diffraction",
		"synchrotron",
		"instrument control",
		"data acquisition"
	],
	"license": "SEE LICENSE IN LICENSE",
	"bugs": {
		"url": "https://github.com/fujidana/vscode-spec-command/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/fujidana/vscode-spec-command.git"
	},
	"homepage": "https://github.com/fujidana/vscode-spec-command/blob/master/README.md",
	"activationEvents": [
		"onLanguage:spec-command",
		"onCommand:spec-command.openReferenceManual"
	],
	"main": "./out/extension.js",
	"contributes": {
		"languages": [
			{
				"id": "spec-command",
				"aliases": [
					"spec command",
					"spec macro"
				],
				"extensions": [
					".mac"
				],
				"configuration": "./language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "spec-command",
				"scopeName": "source.spec-command",
				"path": "./syntaxes/specCommand.tmLanguage.json"
			}
		],
		"snippets": [
			{
				"language": "spec-command",
				"path": "./syntaxes/specCommand.snippets.json"
			}
		],
		"commands": [
			{
				"command": "spec-command.openReferenceManual",
				"title": "Open Reference Manual",
				"category": "spec command",
				"icon": "$(references)"
			},
			{
				"command": "spec-command.execSelectionInTerminal",
				"title": "Run Selction/Line in Active Terminal",
				"category": "spec command",
				"icon": "$(play)"
			},
			{
				"command": "spec-command.execFileInTerminal",
				"title": "Run File in Active Terminal",
				"category": "spec command",
				"icon": "$(run-all)"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "spec-command.openReferenceManual"
				},
				{
					"command": "spec-command.execSelectionInTerminal",
					"when": "editorLangId == 'spec-command'"
				},
				{
					"command": "spec-command.execFileInTerminal",
					"when": "editorLangId == 'spec-command'"
				}
			],
			"explorer/context": [
				{
					"command": "spec-command.execFileInTerminal",
					"when": "resourceLangId == 'spec-command'",
					"group": "9_speccommand"
				}
			],
			"editor/title": [
				{
					"command": "spec-command.execSelectionInTerminal",
					"alt": "spec-command.execFileInTerminal",
					"when": "editorLangId == 'spec-command'",
					"group": "navigation"
				}
			],
			"editor/context": [
				{
					"command": "spec-command.execSelectionInTerminal",
					"when": "editorTextFocus && editorLangId == 'spec-command'",
					"group": "9_speccommand"
				},
				{
					"command": "spec-command.execFileInTerminal",
					"when": "editorTextFocus && editorLangId == 'spec-command'",
					"group": "9_speccommand"
				}
			]
		},
		"keybindings": [
			{
				"command": "spec-command.execSelectionInTerminal",
				"key": "shift+enter",
				"when": "editorTextFocus && editorLangId == 'spec-command'"
			}
		],
		"configuration": {
			"title": "spec command",
			"properties": {
				"spec-command.showReferenceManualInPreview": {
					"type": "boolean",
					"default": true,
					"description": "Shows a preview (Webview created by built-in Markdown extension) in addition to a markdown source after \"Open Reference Manual\" command is invoked."
				},
				"spec-command.editor.hintVolume.hover": {
					"type": "string",
					"default": "full",
					"description": "Controls the volume of explanatory text in hovers, which is shown when the mouse cursor is on a symbol.",
					"enum": [
						"sentence",
						"paragraph",
						"full"
					]
				},
				"spec-command.editor.hintVolume.completionItem": {
					"type": "string",
					"default": "sentence",
					"description": "Controls the volume of explanatory text in auto completion, which is shown when the user types a symbol.",
					"enum": [
						"sentence",
						"paragraph",
						"full"
					]
				},
				"spec-command.editor.hintVolume.signatureHelp": {
					"type": "string",
					"default": "sentence",
					"description": "Controls the volume of explanatory text in signature help, which is shown when the user edits function arguments.",
					"enum": [
						"sentence",
						"paragraph",
						"full"
					]
				},
				"spec-command.editor.codeSnippets": {
					"type": "array",
					"default": [],
					"markdownDescription": "Lists code snippet templates that may include a placeholder of motor (`%MOT`) or counter (`%CNT`) mnemonics in TextMate snippet syntax. Read [Snippets in Visual Studio Code](https://code.visualstudio.com/docs/editor/userdefinedsnippets) for other information about the syntax. Example: `mv ${1%MOT} ${2:pos} # absolute move`.",
					"items": {
						"type": "string",
						"pattern": "^(([a-zA-Z_][a-zA-Z0-9_]*)\\s+[^#]+?)\\s*(#\\s*(.*))?$"
					}
				},
				"spec-command.mnemonic.motors": {
					"type": "array",
					"default": [],
					"markdownDescription": "Lists motor mnemonics, which will be used by IntelliSence and code snippets. One can optionally add the description after `#` letter. Example: `tth # Detector's two-theta angle`.",
					"items": {
						"type": "string",
						"pattern": "^([a-zA-Z_][a-zA-Z0-9_]{0,6})\\s*(#\\s*(.*))?$"
					}
				},
				"spec-command.mnemonic.counters": {
					"type": "array",
					"default": [
						"sec # count time in second"
					],
					"markdownDescription": "Lists counter mnemonics, which will be used by IntelliSence and code snippets. One can optionally add the descriptions after `#` letter. Example: `sec # count time in second`.",
					"items": {
						"type": "string",
						"pattern": "^([a-zA-Z_][a-zA-Z0-9_]{0,6})\\s*(#\\s*(.*))?$"
					}
				},
				"spec-command.workspace.inclusiveFilePattern": {
					"type": "string",
					"default": "**/*.mac",
					"scope": "resource",
					"markdownDescription": "Specifies a glob pattern used to find files in a workspace. Symbols in pattern-matched files becomes available in code navigation. See [VS Code API](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) for the syntax."
				},
				"spec-command.workspace.exclusiveFilePattern": {
					"type": "string",
					"default": "",
					"scope": "resource",
					"markdownDescription": "Specifies a glob pattern used to exclude files in a workspace from being parsed. See [VS Code API](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) for the syntax."
				},
				"spec-command.workspace.diagnoseProblems": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "Controls whether diagnostic results of files in a workspace are listed in 'Problems' view. If disabled, only syntax problems of files opened by editors are listed."
				},
				"spec-command.command.filePathPrefixInTerminal": {
					"type": "string",
					"default": "",
					"scope": "resource",
					"markdownDescription": "Specifies a file path prefix used in \"Run File in Active Terminal\" command. This option is neccessary when the working directory of __spec__ running in a terminal view is different from the workspace folder."
				}
			}
		}
	},
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": "limited",
			"description": "The \"spec-command.commandP.filePathrefixInTerminal\" option is disabled in an untrusted workspace in order to protect from code injection when the \"Run File in Active Terminal\" command is called.",
			"restrictedConfigurations": [
				"spec-command.commandP.filePathrefixInTerminal"
			]
		}
	},
	"scripts": {
		"vscode:prepublish": "npm-run-all -s pegjs js-yaml:* compile",
		"compile": "tsc -p ./",
		"lint": "eslint src --ext ts",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile && npm run lint",
		"test": "node ./out/test/runTest.js",
		"js-yaml:apiReference": "js-yaml ./src/specCommand.apiReference.yaml > ./syntaxes/specCommand.apiReference.json",
		"js-yaml:tmLanguage": "js-yaml ./src/specCommand.tmLanguage.yaml > ./syntaxes/specCommand.tmLanguage.json",
		"pegjs": "peggy --cache --plugin ./node_modules/ts-pegjs/src/tspegjs --extra-options-file ./src/pegconfig.json -o src/grammar.ts src/grammer.pegjs"
	},
	"dependencies": {
		"estraverse": "^5.2.0"
	},
	"devDependencies": {
		"@types/estraverse": "^5.1.0",
		"@types/glob": "^7.1.3",
		"@types/mocha": "^8.2.2",
		"@types/node": "14.x",
		"@types/vscode": "^1.56.0",
		"@typescript-eslint/eslint-plugin": "^4.26.0",
		"@typescript-eslint/parser": "^4.26.0",
		"eslint": "^7.27.0",
		"glob": "^7.1.7",
		"js-yaml": "^4.1.0",
		"mocha": "^8.4.0",
		"npm-run-all": "^4.1.5",
		"ts-pegjs": "^1.0.0",
		"typescript": "^4.3.2",
		"vscode-test": "^1.5.2"
	}
}
