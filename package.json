{
	"publisher": "fujidana",
	"name": "spec-command",
	"displayName": "spec command",
	"description": "spec command file support for VS Code",
	"version": "1.6.1-alpha.20210913",
	"engines": {
		"vscode": "^1.59.0"
	},
	"categories": [
		"Programming Languages",
		"Snippets",
		"Linters"
	],
	"icon": "resources/icon.png",
	"keywords": [
		"X-ray diffraction",
		"synchrotron",
		"instrument control",
		"data acquisition"
	],
	"license": "SEE LICENSE IN LICENSE",
	"bugs": {
		"url": "https://github.com/fujidana/vscode-spec-command/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/fujidana/vscode-spec-command.git"
	},
	"homepage": "https://github.com/fujidana/vscode-spec-command#readme",
	"activationEvents": [
		"onLanguage:spec-command",
		"onCommand:spec-command.openReferenceManual"
	],
	"main": "./dist/extension-node.js",
	"browser": "./dist/extension-web.js",
	"contributes": {
		"languages": [
			{
				"id": "spec-command",
				"aliases": [
					"spec command",
					"spec macro"
				],
				"extensions": [
					".mac"
				],
				"configuration": "./language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "spec-command",
				"scopeName": "source.spec-command",
				"path": "./syntaxes/specCommand.tmLanguage.json"
			}
		],
		"snippets": [
			{
				"language": "spec-command",
				"path": "./syntaxes/specCommand.snippets.json"
			}
		],
		"commands": [
			{
				"command": "spec-command.openReferenceManual",
				"title": "Open Reference Manual",
				"category": "spec command",
				"icon": "$(references)"
			},
			{
				"command": "spec-command.execSelectionInTerminal",
				"title": "Run Selction/Line in Active Terminal",
				"category": "spec command",
				"icon": "$(play)"
			},
			{
				"command": "spec-command.execFileInTerminal",
				"title": "Run File in Active Terminal",
				"category": "spec command",
				"icon": "$(run-all)"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "spec-command.openReferenceManual"
				},
				{
					"command": "spec-command.execSelectionInTerminal",
					"when": "shellExecutionSupported && editorLangId == 'spec-command'"
				},
				{
					"command": "spec-command.execFileInTerminal",
					"when": "shellExecutionSupported && editorLangId == 'spec-command'"
				}
			],
			"explorer/context": [
				{
					"command": "spec-command.execFileInTerminal",
					"when": "shellExecutionSupported && resourceLangId == 'spec-command'",
					"group": "9_speccommand"
				}
			],
			"editor/title": [
				{
					"command": "spec-command.execSelectionInTerminal",
					"alt": "spec-command.execFileInTerminal",
					"when": "shellExecutionSupported && editorLangId == 'spec-command'",
					"group": "navigation"
				}
			],
			"editor/context": [
				{
					"command": "spec-command.execSelectionInTerminal",
					"when": "shellExecutionSupported && editorTextFocus && editorLangId == 'spec-command'",
					"group": "9_speccommand"
				},
				{
					"command": "spec-command.execFileInTerminal",
					"when": "shellExecutionSupported && editorTextFocus && editorLangId == 'spec-command'",
					"group": "9_speccommand"
				}
			]
		},
		"keybindings": [
			{
				"command": "spec-command.execSelectionInTerminal",
				"key": "shift+enter",
				"when": "shellExecutionSupported && editorTextFocus && editorLangId == 'spec-command'"
			}
		],
		"configuration": {
			"title": "spec command",
			"properties": {
				"spec-command.showReferenceManualInPreview": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Shows a preview (Webview created by built-in Markdown extension) in addition to a markdown source after [Open Reference Manual](command:spec-command.openReferenceManual) command is invoked."
				},
				"spec-command.editor.hintVolume.hover": {
					"type": "string",
					"default": "full",
					"description": "Controls the volume of explanatory text in hovers, which is shown when the mouse cursor is on a symbol.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.suggest.suppressMessages#` instead.",
					"enum": [
						"sentence",
						"paragraph",
						"full"
					]
				},
				"spec-command.editor.hintVolume.completionItem": {
					"type": "string",
					"default": "sentence",
					"description": "Controls the volume of explanatory text in auto completion, which is shown when the user types a symbol.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.suggest.suppressMessages#` instead.",
					"enum": [
						"sentence",
						"paragraph",
						"full"
					]
				},
				"spec-command.editor.hintVolume.signatureHelp": {
					"type": "string",
					"default": "sentence",
					"description": "Controls the volume of explanatory text in signature help, which is shown when the user edits function arguments.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.suggest.suppressMessages#` instead.",
					"enum": [
						"sentence",
						"paragraph",
						"full"
					]
				},
				"spec-command.editor.codeSnippets": {
					"type": "array",
					"default": [],
					"markdownDescription": "Lists code snippet templates that may include a placeholder of motor (`%MOT`) or counter (`%CNT`) mnemonics in TextMate snippet syntax. Read [Snippets in Visual Studio Code](https://code.visualstudio.com/docs/editor/userdefinedsnippets) for other information about the syntax. Example: `mv ${1%MOT} ${2:pos} # absolute move`.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.suggest.codeSnippets#` instead.",
					"items": {
						"type": "string",
						"pattern": "^(([a-zA-Z_][a-zA-Z0-9_]*)\\s+[^#]+?)\\s*(#\\s*(.*))?$"
					}
				},
				"spec-command.suggest.suppressMessages": {
					"type": "object",
					"markdownDescription": "Suppresses messages shown in code completion.",
					"default": {
						"completionItem.label.detail": false,
						"completionItem.label.description": false,
						"completionItem.documentation": false,
						"signatureHelp.signatures.documentation": false,
						"hover.contents": false
					},
					"properties": {
						"completionItem.label.detail": {
							"type": "boolean",
							"default": false,
							"description": "Hides the detail of unresolved completion item labels, where parameters of functions are typically shown."
						},
						"completionItem.label.description": {
							"type": "boolean",
							"default": false,
							"description": "Hides the description of unresolved completion item labels, where file paths are typically shown."
						},
						"completionItem.documentation": {
							"type": "boolean",
							"default": false,
							"description": "Truncates explanatory text of a selected item of auto completion suggestions to a sentence."
						},
						"signatureHelp.signatures.documentation": {
							"type": "boolean",
							"default": false,
							"description": "Truncates explanatory text in a signature help, which is shown when the user edits function arguments, to a paragraph."
						},
						"hover.contents": {
							"type": "boolean",
							"default": false,
							"description": "Truncates explanatory text in a hover, which is shown when the mouse cursor is on a symbol, to a paragraph."
						}
					},
					"additionalProperties": false
				},
				"spec-command.mnemonic.motors": {
					"type": "array",
					"default": [],
					"markdownDescription": "Lists motor mnemonics, which will be used by IntelliSense and code snippets. One can optionally add the description after `#` letter. Example: `tth # Detector's two-theta angle`.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.suggest.motors#` instead.",
					"items": {
						"type": "string",
						"pattern": "^([a-zA-Z_][a-zA-Z0-9_]{0,6})\\s*(#\\s*(.*))?$"
					}
				},
				"spec-command.mnemonic.counters": {
					"type": "array",
					"default": [
						"sec # count time in second"
					],
					"markdownDescription": "Lists counter mnemonics, which will be used by IntelliSense and code snippets. One can optionally add the descriptions after `#` letter. Example: `sec # count time in second`.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.suggest.counters#` instead.",
					"items": {
						"type": "string",
						"pattern": "^([a-zA-Z_][a-zA-Z0-9_]{0,6})\\s*(#\\s*(.*))?$"
					}
				},
				"spec-command.suggest.codeSnippets": {
					"type": "object",
					"markdownDescription": "Lists key-value pairs of code snippets for IntelliSense code suggestion. The key is a snippet name on which IntelliSense substring matching is performed. The value is a snippet template that may contain special placeholders for motors (`%MOT`) and counters (`%CNT`), in addition to built-in tabstops, placeholders, choise and variables described in [Snippets in Visual Studio Code](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax); descriptive text can follow after a hash sign (`#`). Examples: \n\n- `mv ${1%MOT} ${2:pos} # absolute move`\n- `d2scan ${1%MOT1} ${2:begin1} ${3:end1} ${4%MOT2} ${5:begin2} ${6:end2} ${7:steps} ${8:sec} # two-motor relative-position scan`",
					"default": {},
					"patternProperties": {
						"^[a-zA-Z_][a-zA-Z0-9_\\-]*$": {
							"type": "string"
						}
					},
					"additionalProperties": false
				},
				"spec-command.suggest.motors": {
					"type": "object",
					"markdownDescription": "Lists key-value (mnemonic-explanatory text) pairs of motors for IntelliSense code suggestion.",
					"default": {},
					"patternProperties": {
						"^[a-zA-Z_][a-zA-Z0-9_]{0,6}$": {
							"type": "string"
						}
					},
					"additionalProperties": false
				},
				"spec-command.suggest.counters": {
					"type": "object",
					"markdownDescription": "Lists key-value (mnemonic-explanatory text) pairs of counters for IntelliSense code suggestion.",
					"default": {
						"sec": "count time in second"
					},
					"patternProperties": {
						"^[a-zA-Z_][a-zA-Z0-9_]{0,6}$": {
							"type": "string"
						}
					},
					"additionalProperties": false
				},
				"spec-command.workspace.inclusiveFilePattern": {
					"type": "string",
					"default": "**/*.mac",
					"scope": "resource",
					"markdownDescription": "Specifies a glob pattern used to find files in a workspace. Symbols in pattern-matched files becomes available in code navigation. See [VS Code API](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) for the syntax.",
					"markdownDeprecationMessage": "**Deprecated**: Please use the built-in `#files.associations#` property, instead."
				},
				"spec-command.workspace.exclusiveFilePattern": {
					"type": "string",
					"default": "",
					"scope": "resource",
					"markdownDescription": "Specifies a glob pattern used to exclude files in a workspace from being parsed. See [VS Code API](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) for the syntax.",
					"markdownDeprecationMessage": "**Deprecated**: Please use the built-in `#files.exclude#` property, instead."
				},
				"spec-command.workspace.diagnoseProblems": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "Controls whether diagnostic results of files in a workspace are listed in 'Problems' view. If disabled, only syntax problems of files opened by editors are listed."
				},
				"spec-command.terminal.filePathPrefix": {
					"type": "string",
					"default": "",
					"scope": "resource",
					"markdownDescription": "Specifies a file path prefix used in [Run File in Active Terminal](command:spec-command.execFileInTerminal) command. This option is useful for case in which the working directory of __spec__ running in a terminal view is different from the workspace folder."
				},
				"spec-command.command.filePathPrefixInTerminal": {
					"type": "string",
					"default": "",
					"scope": "resource",
					"markdownDescription": "Specifies a file path prefix used in [Run File in Active Terminal](command:spec-command.execFileInTerminal) command. This option is useful for case in which the working directory of __spec__ running in a terminal view is different from the workspace folder.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.terminal.filePathPrefix#` instead."
				}
			}
		}
	},
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": "limited",
			"description": "The \"spec-command.terminal.filePathPrefix\" configuration property is disabled in untrusted workspaces in order to protect from code injection when the \"Run File in Active Terminal\" command is called.",
			"restrictedConfigurations": [
				"spec-command.terminal.filePathPrefix"
			]
		}
	},
	"scripts": {
		"vscode:prepublish": "npm-run-all -s pegjs js-yaml:* package",
		"compile": "webpack",
		"watch": "webpack --watch",
		"test": "npm run compile && npm run test-node && npm run test-web",
		"test-node": "node ./dist/test/runTest.js",
		"test-web": "vscode-test-web --browserType=chromium --extensionDevelopmentPath=. --extensionTestsPath=./dist/test/suite/index-web",
		"package": "webpack --mode production --devtool hidden-source-map",
		"lint": "eslint src --ext ts",
		"js-yaml:snippets": "js-yaml ./src/specCommand.snippets.yaml > ./syntaxes/specCommand.snippets.json",
		"js-yaml:apiReference": "js-yaml ./src/specCommand.apiReference.yaml > ./syntaxes/specCommand.apiReference.json",
		"js-yaml:tmLanguage": "js-yaml ./src/specCommand.tmLanguage.yaml > ./syntaxes/specCommand.tmLanguage.json",
		"pegjs": "peggy --cache --plugin ./node_modules/ts-pegjs/src/tspegjs --extra-options-file ./src/pegconfig.json -o src/grammar.ts src/grammer.pegjs"
	},
	"dependencies": {
		"estraverse": "^5.2.0"
	},
	"devDependencies": {
		"@types/estraverse": "^5.1.0",
		"@types/glob": "^7.1.3",
		"@types/mocha": "^8.2.2",
		"@types/node": "14.x",
		"@types/vscode": "^1.59.0",
		"@types/webpack-env": "^1.16.2",
		"@typescript-eslint/eslint-plugin": "^4.26.0",
		"@typescript-eslint/parser": "^4.26.0",
		"@vscode/test-electron": "^1.6.2",
		"@vscode/test-web": "^0.0.8",
		"assert": "^2.0.0",
		"eslint": "^7.27.0",
		"glob": "^7.1.7",
		"js-yaml": "^4.1.0",
		"mocha": "^8.4.0",
		"npm-run-all": "^4.1.5",
		"process": "^0.11.10",
		"ts-loader": "^9.2.2",
		"ts-pegjs": "^1.0.0",
		"typescript": "^4.3.2",
		"webpack": "^5.38.1",
		"webpack-cli": "^4.7.0"
	}
}
